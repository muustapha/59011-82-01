

////6.tableau
////6.1
//// exercice1
////le programme affiche 
//using System;

//R, K, J 
////le programme affiche
//a, r, k, j, b, s, l, k


////exercice 2
////le programme affiche

// Note : 
//1
//3
//6  
//10 
//15 
//21 
//28 
//36 
//45
//55;
//exercice 3
//le programme affiche
//1 
//4
//9
//16
//25
//36
//49
//64
//81
//100;

//6.2
//exercice 4

int[] T;
T = new int[10] {1,2,3,4,5,6,7,8,9, 10 };
{
    foreach (int p in T)
        Console.WriteLine(p);
}
//exercice 5
int[] T;
T= new int[10]
 for (int i = 0; i < 10; i++)
{
    T[i] = i + 1;
}
{
    foreach (int p in T)
        Console.WriteLine(p);
}
//exercice 6 afficher la somme des n éléments du tableau
int[] T;
T = new int[10];
int somme = 0;
for (int i = 0; i < 10; i++)
{
    somme = somme + T[i];
}   
Console.WriteLine(somme);


/*int[] T = new int[10];
           int somme = 0;
           for (int i = 0; i < T.Length; i++)
           {
               T[i] = i + 1;
           }
           foreach (int p in T)
               somme+=p;
           Console.WriteLine(somme);*/


//exercice 7 Demandez à l’utilisateur de saisir un int et dites-lui si ce nombre se trouve dans T
int[] T = new int[10];
int somme = 0;
for (int i = 0; i < T.Length; i++)
{
    T[i] = i + 1;
}
Console.WriteLine("saisir un nombre");
int n = int.Parse(Console.ReadLine());
for (int i = 0; i < T.Length; i++)
{
    if (T[i] == n)
    {
        Console.WriteLine("le nombre se trouve dans le tableau");
    }
    else
    {
        Console.WriteLine("le nombre ne se trouve pas dans le tableau");
    }
}
//6.3 Indices
//Exercice 8 - Permutation circulaire
//Placez dans un deuxième tableau la permutation circulaire vers la droite des éléments de T
int[] T = new int[10];
int[] T2 = new int[10];
for (int i = 0; i < T.Length; i++)
{
    T[i] = i + 1;
}
for (int i = 0; i < T.Length; i++)
{
    T2[i] = T[(i + 1) % T.Length];
}
foreach (int p in T2)
    Console.WriteLine(p);


//Exercice 9 - Permutation circulaire sans deuxième tableau
//Même exercice mais sans utiliser de deuxième tableau
int[] T = new int[10];
    for (int i = 0; i < T.Length; i++)
{
    T[i] = i + 1;
}
    for (int i = 0; i < T.Length; i++)
{
    T[i] = T[(i + 1) % T.Length];
}
    foreach (int p in T)
        Console.WriteLine(p);


//Exercice 10 - Miroir
//Inversez l’ordre des éléments de T sans utiliser de deuxième tableau

int[] T = new int[10];
for (int i = 0; i < T.Length; i++)
{
    T[i] = i + 1;
}
for (int i = 0; i < T.Length / 2; i++)
{
    int temp = T[i];
    T[i] = T[T.Length - i - 1];
    T[T.Length - i - 1] = temp;
}
foreach (int p in T)
    Console.WriteLine(p);



//6.4 Recherche séquentielle
//Exercice 11 - Modification du tableau
//Etendez le tableau T à 20 éléments. Placez dans T[i] le reste modulo 17 de i2
int[] T = new int[20];
for (int i = 0; i < T.Length; i++)
{
    T[i] = (i * i) % 17;
}
foreach (int p in T)
    Console.WriteLine(p);



//Exercice 12 - Min/max
//Affichez les valeurs du plus petit et du plus grand élément de T.

int[] T = new int[20];
for (int i = 0; i < T.Length; i++)
{
    T[i] = (i * i) % 17;
}
int min = T[0];
int max = T[0];
for (int i = 0; i < T.Length; i++)
{
    if (T[i] < min)
    {
        min = T[i];
    }
    if (T[i] > max)
    {
        max = T[i];
    }
}
Console.WriteLine("min = " + min);
Console.WriteLine("max = " + max);

//Exercice 13 - Recherche séquentielle
//Demandez à l’utilisateur de saisir une valeur x et donnez-lui la liste des indices i tels que T[i] a la valeur x.

int[] T = new int[20];
for (int i = 0; i < T.Length; i++)
{
    T[i] = (i * i) % 17;
}
Console.WriteLine("saisir une valeur");
int x = int.Parse(Console.ReadLine());
for (int i = 0; i < T.Length; i++)
{
    if (T[i] == x)
    {
        Console.WriteLine("T[" + i + "] = " + x);
    }
}

//Exercice 14 - Recherche séquentielle avec stockage des indices
//Même exercice que précédemment, mais vous en affichant La valeur ... se trouve aux indices suivants : ... si x se trouve dans T, et La valeur ... n’a pas été trouvée si x ne se trouve pas dans T. Vous utiliserez un tableau Q dans lequel vous stockerez les indices auxquels x aura été trouvé dans T
int[] T = new int[20];
int[] Q = new int[20];
for (int i = 0; i < T.Length; i++)
{
    T[i] = (i * i) % 17;
}
Console.WriteLine("saisir une valeur");
int x = int.Parse(Console.ReadLine());
int j = 0;
for (int i = 0; i < T.Length; i++)
{
    if (T[i] == x)
    {
        Q[j] = i;
        j++;
    }
}
if (j == 0)
{
    Console.WriteLine("La valeur " + x + " n’a pas été trouvée");
}
else
{
    Console.WriteLine("La valeur " + x + " se trouve aux indices suivants : ");
    for (int i = 0; i < j; i++)
    {
        Console.WriteLine(Q[i]);
    }
}

//6.5 Morceaux choisis
//Exercice 15 - Pièces de monnaie
//Reprenez l’exercice sur les pièces de monnaie en utilisant deux tableaux, un pour stocker les valeurs des pièces dans l’ordre décroissant, l’autre pour stocker le nombre de chaque pièce.

int[] T = new int[8] { 200, 100, 50, 20, 10, 5, 2, 1 };
int[] Q = new int[8];
Console.WriteLine("saisir une somme");
int somme = int.Parse(Console.ReadLine());
for (int i = 0; i < T.Length; i++)
{
    Q[i] = somme / T[i];
    somme = somme % T[i];
}
for (int i = 0; i < T.Length; i++)
{
    Console.WriteLine(Q[i] + " pièces de " + T[i] + " centimes");
}

//Exercice 16 - Recherche de la tranche minimale en 3 boucles
//Une tranche est délimitée par deux indices i et j tels que i j, la valeur d’une tranche est ti + . . . + tj.
//Ecrire un programme de recherche de la plus petite tranche d’un tableau, vous utiliserez trois boucles imbriquées. Vous testerez votre algorithme sur un tableau T à 20 éléments aléatoires de signes quelconques.

int[] T = new int[20];
Random aleatoire = new Random();
for (int i = 0; i < T.Length; i++)
{
    T[i] = aleatoire.Next(-100, 100);
}
int min = T[0];
int iMin = 0;
int jMin = 0;
for (int i = 0; i < T.Length; i++)
{
    for (int j = i; j < T.Length; j++)
    {
        int somme = 0;
        for (int k = i; k <= j; k++)
        {
            somme += T[k];
        }
        if (somme < min)
        {
            min = somme;
            iMin = i;
            jMin = j;
        }
    }
}
Console.WriteLine("La plus petite tranche est : " + min + " et va de l’indice " + iMin + " à l’indice " + jMin);

Exercice 17 - Recherche de la tranche minimale en 2 boucles (difficile)
Même exercice mais en utilisant deux boucles imbriquées. Vous évaluerez ti + . . . + tj+1 en calculant (ti + . . . + tj) +tj + 1

